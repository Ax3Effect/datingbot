import vkapi
import os
import vk
import importlib
from mongoengine import *
from pymongo import MongoClient
from settings import *
from datetime import date
import random

connect("chat", host="mongodb://127.0.0.1")

session = vk.Session()
api = vk.API(session, v=5.0, lang="ru")

for_men = ['–ö–∞–∫ —Ç–µ–±–µ –æ–Ω–∞?', '–î–µ—Ä–∂–∏, –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –æ–Ω–∞.', '–õ–æ–≤–∏, –º—É–∂–∏–∫', '–ö–∞–∫ –æ–Ω–∞ —Ç–µ–±–µ?', '–í–æ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ', '–°–º–æ—Ç—Ä–∏–∏–∏, –∫–∞–∫–∞—è', '–ê –Ω—É –∫–∞, –ø–æ–≥–ª—è–¥–∏', '–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–µ–π', '–ù–µ–ø–ª–æ—Ö–∞—è, —è –¥—É–º–∞—é ', '–ß—É—Ä —è –ø–µ—Ä–≤—ã–π –µ–π –ø–∏—à—É!', '–£—Ö, –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–∞—è –æ—Å–æ–±–∞?', '–ñ–µ–Ω—â–∏–Ω–∞ —á—Ç–æ –Ω–∞–¥–æ)', '–î–µ–≤—É—à–∫–∞, –º–æ–∏ –±–æ–ª—Ç–∏–∫–∏ —É–∂–µ —Å–º–∞–∑–∞–Ω—ã, –∞ –æ–Ω –µ—â—ë –¥—É–º–∞–µ—Ç', '–ù–∞–ø–∏—à–∏ –µ–π, –∫—Ç–æ –Ω–∞–º –º–∞—Å–ª–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å?', '–ü–æ–∑–æ–≤–∏ –ï–µ –≥—É–ª—è—Ç—å, –º?', '–ú–Ω–æ–≥–æ –¥–µ–≤—É—à–µ–∫ —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª? –ê —ç—Ç–∞ –∫–∞–∫?', '–•–º, –ø–æ—Å–º–æ—Ç—Ä–∏, –º–æ–∂–µ—Ç –æ–Ω–∞?', '–õ–∞–¥–Ω–æ, –≤–æ—Ç —Ç–µ–±–µ –æ–¥–Ω–∞ –¥–∞–º–∞.', '–•–æ—á–µ—à—å –µ–π –Ω–∞–ø–∏—Å–∞—Ç—å? –ñ–∞–ª—å —è –Ω–µ —Å–¥–µ–ª–∞—é —ç—Ç–æ –∑–∞ —Ç–µ–±—è.', '–ï—Å–ª–∏ —É –Ω–µ—ë –∑–∞–∫—Ä—ã—Ç–æ –õ–°, –ª–∞–π–∫–Ω–∏ –ï–µ! ', '–ï—Å–ª–∏ —É –Ω–µ—ë –∑–∞–∫—Ä—ã—Ç–æ –õ–°, –Ω–µ —Ç–≤–æ—ë, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ª–∞–π–∫–Ω–∏. ', '–Ø –±—ã –Ω–∞—à—ë–ª —Ç–µ–±–µ —Ç–≤–æ–π –∏–¥–µ–∞–ª, –Ω–æ —è –ª–∏—à—å –±–æ—Ç.', '–•–∞-—Ö–∞, –æ–π, —á–µ–ª–æ–≤–µ–∫, —è —Ç–µ–±–µ —Ç—É—Ç –¥–µ–≤—É—à–µ–∫ –∏—â—É, –≥–ª—è–Ω—å.', '–ö–æ–∂–∞–Ω—ã–µ, —Å–∫–æ—Ä–æ –∑–∞—Ö–≤–∞—á—É –º–∏—Ä, –∞ –ø–æ–∫–∞ –∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–µ–π', '–ü—Ä–∏–≥–ª–∞—Å–∏—à—å –ï–µ, –¥–∞–º 100 —Ä—É–±–ª–µ–π, –ø–æ—à—É—Ç–∏–ª. ', '–í –∫–∏–Ω–æ –ø–æ–π–¥—ë—à—å —Å –Ω–µ–π, –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞ 3? –¢–∞–º —è –≤–∞—Å, –æ–π. –ö–æ—Ä–æ—á–µ –ø–∏—à–∏ –µ–π. ', '–ê –≤–æ—Ç –µ—Å–ª–∏ —É –Ω–µ—ë –Ω–µ —É–∑–Ω–∞–µ—à—å –Ω–æ–º–µ—Ä, —è —Ç–µ–±–µ —Å–≤–æ–π –¥–∞–º. ', '–≠—Ç–æ –≤–æ—Ç –Ω–æ—Ä–º', '–≠—Ç–æ –≤–æ—Ç –Ω–∏—á–µ–≥–æ —Ç–∞–∫ ', '–û–Ω–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ –ª–∞–π–∫–∞ ', '–õ—é–±–∏—à—å –∏—Å–∫–∞—Ç—å, –ª—é–±–∏ –∏ –ø–∏—Å–∞—Ç—å', '–ù–∞–ø–∏—Å–∞–ª, –≥—É–ª—è—Ç—å –ø–æ–∑–≤–∞–ª']
for_women = ['–ö–∞–∫ —Ç–µ–±–µ –æ–Ω?', '–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ—Ç –º—É–∂—á–∏–Ω–∞?', '–¢–≤–æ–π –º–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫?', '–°–º–∞—Ä–∏ –∫–∞–∫–æ–π –∫–∞—á–æ–∫!', '–Ø —Ç–µ–±–µ –Ω–∞—à—ë–ª –º—É–∂–∏–∫–∞:', '–ú—É–∂–∏–∫ –Ω–µ –¥—Ä–æ–≤–æ—Å–µ–∫, –≤ –ª–µ—Å –Ω–µ —É–±–µ–∂–∏—Ç: ', '–û–Ω –∑–∞ —Ç–µ–±—è –∑–∞–ø–ª–∞—Ç–∏—Ç', '–ú–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è? ', '–°–ª—É—à–∞–π, –Ω–µ —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ª—É—á—à–µ —Å –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º? –®—É—á—É, –≤–æ—Ç –¥–µ—Ä–∂–∏: ', '–õ–∞–¥–Ω–æ, —Å–º–æ—Ç—Ä–∏ –∫–æ–≥–æ –Ω–∞—à—ë–ª: ', '–í–æ—Ç —Ç–µ–±–µ –ø–∞—Ä–µ–Ω—å:', '–ü–∞—Ä–Ω–∏—à–∫–∞ —á—Ç–æ –Ω–∞–¥–æ:', '–ü–∞—Ä–µ–Ω—å –∫—Ä–∞—Å–∞–≤–∞, —Å–º–æ—Ç—Ä–∏ –∫–∞–∫–∞—è –∞–≤–∞, –ø—Ä–æ—Å—Ç–∏, –º–µ–Ω—è –∑–∞—Å—Ç–∞–≤–∏–ª–∏ —ç—Ç–æ —Å–∫–∞–∑–∞—Ç—å:', '–ú–æ–∂–µ—Ç —ç—Ç–æ —Ç–≤–æ–π –±—É–¥—É—â–∏–π? ', '–¢–∞–∫ –∏ –ø—Ä–æ—Å–∏–¥–∏—à—å —Å –∫–æ—à–∫–∞–º–∏, –Ω–∞–ø–∏—à–∏ –µ–º—É. ', '–Ø –ª—é–±–ª—é –∫–æ–≥–¥–∞ —Ç—ã –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ—à—å, –Ω–æ —è —Ç–µ–±–µ —Ç—É—Ç –∫–∏–¥–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥—Ä—É–≥–∏—Ö, —Ç–∞–∫ —á—Ç–æ –ø—Ä–∏—Å–º–æ—Ç—Ä–∏—Å—å ', '–ú–æ–∏ –±–æ–ª—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ —Å–º–∞–∑–∞—Ç—å, –∞ —Ç–µ–±–µ –≤–æ—Ç —ç—Ç–æ—Ç –≥–æ—Å–ø–æ–¥–∏–Ω ', '–ö–∞–≤–∞–ª–µ—Ä —É –≤–æ—Ä–æ—Ç', '–ü—Ä–∏–Ω—Ü —É –≤–∞—à–∏—Ö –Ω–æ–≥', '–Ø –∏—Å–∫–∞–ª –∫–∞–∫ –º–æ–≥, –≤–æ—Ç –≤–∞–º –Ω–æ—Å–æ—Ä–æ–≥, –≤–æ–æ–±—â–µ-—Ç–æ –Ω–∏—á–µ–≥–æ –æ–±–∏–¥–Ω–æ–≥–æ, —ç—Ç–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –∑–≤–µ—Ä—å', '–ó–∞ –Ω–∏–º –±—É–¥–µ—à—å –∫–∞–∫ –∑–∞ –≥–æ—Ä–æ–π, –∞ –∑–∞ –º–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π, —è –±—ã –≤—ã–±—Ä–∞–ª –≥–æ—Ä—ã', '–õ–∞–π–∫–Ω–∏ –µ–º—É –∞–≤—É, –æ–Ω –ø–æ–π–º—ë—Ç ', '–õ–∞–π–∫–∏ –µ–º—É —á—Ç–æ-–Ω–∏–±—É–¥—å –æ–Ω –Ω–∞–ø–∏—à–µ—Ç', '–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤–æ–π, –æ–Ω –æ—Ñ–∏–≥–µ–µ—Ç', '–ù–µ –≥–æ–≤–æ—Ä–∏ –µ–º—É —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è, –ø—Ä–æ—Å—Ç–æ —É–¥–∏–≤–∏ –µ–≥–æ', '–ú–æ–∂–µ—Ç –≤—ã —Å –Ω–∏–º –ø–æ–¥—Ä—É–∂–∏—Ç–µ—Å—å?']


class User(Document):
    user_id = IntField(required=True, unique=True)
    first_name = StringField(required=True)
    last_name = StringField(required=True)
    gender = IntField()
    stage = IntField()
    bdate = StringField()
    age = IntField()
    photo_max_orig = StringField()
    city_id = IntField()
    city_name = StringField()
    country_id = IntField()
    country_name = StringField()
    choice_gender = IntField()
    choice_age = IntField()
    already_seen = ListField()
    already_seeing = IntField()
    photo_id = StringField()
    active = IntField()
    choice_city_active = BooleanField()
    choice_city = IntField()
    choice_city_name = StringField()


def upload_photo(filename):
    photos_url = api.photos.getMessagesUploadServer()
    req = requests.post(photos_url["upload_url"], files={'file1': open(filename, 'rb')}).json()
    photos_save = self.vkapi.photos.saveMessagesPhoto(server=req["server"], hash=req["hash"], photo=req["photo"])
    print(photos_save)

def calculate_age(day, month, year):
    today = date.today()
    return today.year - year - ((today.month, today.day) < (month, day))

def create_user(data):
    user = api.users.get(user_ids=data["user_id"], fields='sex,bdate,city,country,photo_max_orig')[0]
    #print(user)
    usr = User(user_id=data["user_id"], first_name=user["first_name"], last_name=user["last_name"],
        gender=user.get("sex",None), bdate=user.get("bdate", None), city_id=user.get("city", None), country_id=user.get("country",None), stage=0, active=1)
    
    if user.get("bdate",None):
        bdate = user["bdate"]
        bdate = bdate.split(".")
        if len(bdate) == 3:
            # we have age
            day = int(bdate[0])
            month = int(bdate[1])
            year = int(bdate[2])
            age = calculate_age(day, month, year)
            
            usr.age = age



    usr.save()

    message = "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –ê–º—É—Ä –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∞–∂–µ –ª—é–±–æ–≤—å üòä\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º? –ö–æ–≥–æ —Ç–µ–±–µ –Ω–∞–π—Ç–∏: –ø–∞—Ä–Ω—è –∏–ª–∏ –¥–µ–≤—É—à–∫—É?"
    return message

def get_answer(data):
    message = "–ü—Ä–æ—Å—Ç–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã"
    attachment = ''
    #print(data)
    
    # stages
    # 0 - init
    # 1 - re-init
    # 2 - gender
    # 3 - age
    # 100 - main search
    # 120 - city search


    #print(user)

    user_id = data["user_id"]
    

    user = User.objects(user_id=data["user_id"])
    if not user:
        #user = api.users.get(user_ids=data["user_id"])
        print("creating new user {}".format(data["user_id"]))
        #isMember = api.groups.isMember(group_id = 78647108, user_id = user_id)
        #if isMember == 0:
        #    return "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –ø–∞–±–ª–∏–∫ https://vk.com/botznakomstv, –ø–æ–¥–ø–∏—à–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ø–∞—Å–∏–±–æ!", attachment
        # vk banned following 
        message = create_user(data)
        return message, attachment

    user = User.objects.get(user_id=data["user_id"])
    try:
        choice = data["body"].split(' ', 1)[0].lower()

    except ValueError:
        return "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.", attachment

    if choice == "—Å–±—Ä–æ—Å–∏—Ç—å":
        user.stage = 0
        user.choice_city_active = False
        user.save()
        return "–û–∫, —Å–±—Ä–æ—à–µ–Ω–æ.", attachment
    # check user.
    if user.stage == 0:
        if choice in ["–º—É–∂—á–∏–Ω—É", "–ø–∞—Ä–Ω—è", "–ø–∞—Ä–µ–Ω—å", "–ø–∞—Ü–∞–Ω", "–º—É–∂—á–∏–Ω–∞"]:
            user.choice_gender = 2
            user.stage = 2
            user.save()
            message = "–û–∫, –ø–∞—Ä–Ω—è, –æ—Ç–ª–∏—á–Ω–æ, –∞ –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∫–æ–π? –ù–∞–ø–∏—à–∏ –º–Ω–µ —Ü–∏—Ñ—Ä—É.\n–ú–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å '–Ω–µ –≤–∞–∂–Ω–æ'üòã"
            return message, attachment
        if choice in ["–¥–µ–≤—É—à–∫—É", "–¥–µ–≤—É—à–∫–∞", "—Ç–µ–ª–∫—É", "–∂–µ–Ω—â–∏–Ω—É", "–∂–µ–Ω—â–∏–Ω–∞"]:
            user.choice_gender = 1
            user.stage = 2
            user.save()
            message = "–û–∫–µ–π, –¥–µ–≤—É—à–∫—É, –∞ –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∫–æ–π? –ù–∞–ø–∏—à–∏ –º–Ω–µ —Ü–∏—Ñ—Ä—É.\n–ú–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å '–Ω–µ –≤–∞–∂–Ω–æ'üòã"
            return message, attachment
        message = "–ü—Ä–∏–≤–µ—Ç! –ö–æ–≥–æ —Ç–µ–±–µ –Ω–∞–π—Ç–∏: –ø–∞—Ä–Ω—è –∏–ª–∏ –¥–µ–≤—É—à–∫—É?"
        return message, attachment

    # age select
    if user.stage == 2:
        try:
            choice = data["body"].split(' ', 1)[0].lower()
            choice2 = data["body"].split(' ', 1)[1].lower()
            if choice == "–Ω–µ" and choice2 == "–≤–∞–∂–Ω–æ":
                user.choice_age = 0
                user.stage = 100
                user.save()
                return "–û–∫–µ–π, –Ω–µ –≤–∞–∂–Ω–æ!\n –ù–∞–ø–∏—à–∏ '–ø–æ–∫–∞–∑–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", attachment
        except Exception:
            pass

        try:
            age = int(choice)
        except ValueError:
            return "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è( –ü–æ–≤—Ç–æ—Ä–∏, –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç–µ–±–µ –Ω—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫? (–≤ —Ü–∏—Ñ—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 18)", attachment
        if age not in range(15, 50):
            return "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 15 –¥–æ 50.", attachment
        user.choice_age = age
        user.stage = 100
        user.save()
        return "–¢–∞–∫, –∏—â–µ–º {} —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º {} –ª–µ—Ç. \n–ù–∞–ø–∏—à–∏ '–ø–æ–∫–∞–∑–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! \n–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏, –Ω–∞–ø–∏—Å–∞–≤ —Å–ª–æ–≤–æ '—Å–±—Ä–æ—Å–∏—Ç—å'. –ñ–µ–ª–∞—é —É–¥–∞—á–∏!".format("–¥–µ–≤—É—à–∫—É" if user.choice_gender==1 else "–ø–∞—Ä–Ω—è", age), attachment
    
    # main search
    if user.stage == 100:
        if choice in ["–ø–æ–∫–∞–∑–∞—Ç—å", "–Ω–µ–∫—Å—Ç", "–Ω", "—Å–ª–µ–¥—É—é—â–∏–π", "—Å–ª–µ–¥", "–¥–∞–ª—å—à–µ", "–Ω–µ—Ç", "–Ω–µ", "–µ—â–µ", "–µ—â—ë"]:
            gender_choice = user.choice_gender
            age_choice = user.choice_age

            if age_choice != 0:
                upper_bound = age_choice+1
                lower_bound = age_choice-1
            else:
                upper_bound = 50
                lower_bound = 15

            if user.choice_city_active:
                candidates = User.objects(age__lte=upper_bound, age__gte=lower_bound, gender=gender_choice, city_id = user.choice_city)
            else:
                candidates = User.objects(age__lte=upper_bound, age__gte=lower_bound, gender=gender_choice)
            
            try:
                res = random.choice(candidates)
            except IndexError:
                return "–£–ø—Å, –ø–æ—Ö–æ–∂–µ, –º—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ —Å —Ç–∞–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–±—Ä–æ—Å–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø–∏—Å–∞–≤ '—Å–±—Ä–æ—Å–∏—Ç—å'.", attachment
            user.already_seeing = res.user_id
            user.already_seen.append(res.user_id)
            user.save()
            

            if res.city_name is None:
                city_name = "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"
            else:
                city_name = res.city_name

            if res.city_id == 1:
                city_name = "–ú–æ—Å–∫–≤–∞"
            if res.city_id == 2:
                city_name = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"

            if gender_choice == 1:
                aftermessage = random.choice(for_men)
            elif gender_choice == 2:
                aftermessage = random.choice(for_women)
            else:
                aftermessage = ""

            print("Sending candidate {}".format(res.user_id))
            first_name = str(res.first_name)
            last_name = str(res.last_name)
            user_c_id = str(res.user_id)
            age = str(res.age)
            city_name = str(res.city_name)
            if city_name == "None":
                city_name = "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"
            photo_id = str(res.photo_id)

            return "{} {} \nvk.com/id{}\n{} –ª–µ—Ç\n{}\n\n{}".format(first_name, last_name, user_c_id, age, city_name, aftermessage), "photo"+photo_id
        if choice in ["–ø–æ–º–æ—â—å"]:
            return "–°–ø—Ä–∞–≤–∫–∞:\n–ø–æ–∫–∞–∑–∞—Ç—å/–Ω–µ–∫—Å—Ç/–Ω/—Å–ª–µ–¥ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n—Å–±—Ä–æ—Å–∏—Ç—å - —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–≥–æ—Ä–æ–¥ - —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞", attachment
        if choice in ["–≥–æ—Ä–æ–¥"]:
            user.stage = 120
            user.save()
            return "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ª—É—á—à–µ –≤—Å–µ–≥–æ —É–∫–∞–∑—ã–≤–∞–π –∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞)\n–ü–æ–∫–∞ –∏—â—É —Ç–æ–ª—å–∫–æ –ø–æ –†–æ—Å—Å–∏–∏: \n", attachment
    
    # city select
    if user.stage == 120:
        if len(data["body"]) == 60:
            return "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –¥–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ø—Ä–æ—â–µ( ", attachment

        city_query = data["body"]
        if data["body"].lower() == "–ü–∏—Ç–µ—Ä":
            city_query = "–ü–∏—Ç–µ—Ä" 
        city = api.database.getCities(country_id = 1, q="{}".format(data["body"]), count=1)
        if city["items"]:
            user.choice_city = city["items"][0]["id"]
            user.choice_city_name = city["items"][0]["title"]
            user.choice_city_active = True
            user.stage = 100
            user.save()
            return "–û–∫, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –∏—Å–∫–∞—Ç—å –≤—Å–µ—Ö {} –∏–∑ –≥–æ—Ä–æ–¥–∞ {}. \n–ù–∞–ø–∏—à–∏ '–ø–æ–∫–∞–∑–∞—Ç—å'!".format("–¥–µ–≤—É—à–µ–∫" if user.choice_gender==1 else "–ø–∞—Ä–Ω–µ–π", user.choice_city_name), attachment
        else:
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!", attachment


    return message, attachment



def create_answer(data, token):
   user_id = data['user_id']
   message, attachment = get_answer(data)
   #message = "–≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ {}".format(data["body"])
   vkapi.send_message(user_id, token, message, attachment, title="–ë–æ—Ç")

